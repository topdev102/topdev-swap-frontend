{"version":3,"sources":["utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/ModalInput/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/Divider.tsx","views/Farms/Farms.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx"],"names":["getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","Wrapper","styled","div","StyledLinkExternal","LinkExternal","theme","colors","text","primary","DetailsSection","bscScanAddress","removed","totalValueFormated","lpLabel","addLiquidityUrl","TranslateString","useI18n","justifyContent","href","external","bold","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","farmImage","tokenSymbol","alignItems","mb","src","alt","width","height","flexDirection","variant","StyledTokenInput","input","isWarning","shadows","warning","inset","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","symbol","onChange","onSelectMax","value","inputTitle","isBalanceZero","displayBalance","parseFloat","toFixed","style","position","pl","fontSize","toLocaleString","placeholder","size","onClick","mr","color","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","useCallback","e","currentTarget","handleSelectMax","title","ModalActions","fullWidth","disabled","a","alignSelf","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","pid","onStake","useStake","onUnstake","useUnstake","rawStakedBalance","getBalanceNumber","useModal","onPresentDeposit","onPresentWithdraw","HarvestAction","earnings","onReward","useHarvest","rawEarningsBalance","Action","CardActions","farm","account","requestedApproval","setRequestedApproval","useFarmFromSymbol","lpSymbol","lpAddresses","useFarmUser","allowance","lpAddress","getAddress","lpName","toUpperCase","isApproved","isGreaterThan","web3","useWeb3","lpContract","getBep20Contract","onApprove","useApprove","handleApprove","console","error","textTransform","pr","mt","UnlockButton","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","Grid","GridItem","Description","ApyCalculatorModal","apy","times","BigNumber","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","ml","RainbowLight","keyframes","StyledCardAccent","FCard","props","card","background","Divider","borderColor","ExpandingWrapper","expanded","FarmCard","bnbPrice","ethPrice","showExpandableSection","setShowExpandableSection","communityFarms","includes","split","toLocaleLowerCase","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","CAKE","ETH","Number","undefined","maximumFractionDigits","replace","earnLabel","dual","farmAPY","slice","liquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","display","CardActionsContainer","ExpandableSectionButton","FarmTabButtons","stackedOnly","setStackedOnly","useRouteMatch","url","isExact","ToggleWrapper","checked","activeIndex","as","Link","to","textSubtle","Farms","path","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","useWeb3React","ethPriceUsd","usePriceEthBusd","dispatch","useDispatch","fastRefresh","useRefresh","useEffect","fetchFarmUserDataAsync","activeFarms","filter","inactiveFarms","stackedOnlyFarms","userData","farmsList","farmsToDisplay","cakePriceVsBNB","find","CAKE_POOL_PID","tokenPriceVsQuote","map","tokenAmount","cakeRewardPerBlock","CAKE_PER_BLOCK","poolWeight","cakeRewardPerYear","BLOCKS_PER_YEAR","BUSD","UST","cakeApy","dualApy","rewardPerBlock","plus","Page","textAlign","exact","responsive","aria-label","role","defaultProps"],"mappings":"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","file":"static/js/12.5e42f385.chunk.js","sourcesContent":["// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\n  const secondPart = tokenAddresses[chainId]\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormated?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  removed,\n  totalValueFormated,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(316, 'Stake')}:</Text>\n        <StyledLinkExternal href={addLiquidityUrl}>{lpLabel}</StyledLinkExternal>\n      </Flex>\n      {!removed && (\n        <Flex justifyContent=\"space-between\">\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\n          <Text>{totalValueFormated}</Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"flex-start\">\n        <Link external href={bscScanAddress} bold={false}>\n          {TranslateString(356, 'View on BscScan')}\n        </Link>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  isCommunityFarm,\n  farmImage,\n  tokenSymbol,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.svg`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel}</Heading>\n        <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n}) => {\n  const TranslateString = useI18n()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = isBalanceZero ? '0' : parseFloat(max).toFixed(4)\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">\n            {TranslateString(1120, 'Balance')}: {displayBalance.toLocaleString()}\n          </Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput onChange={onChange} placeholder=\"0\" value={value} />\n          <Button size=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {TranslateString(452, 'Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          No tokens to stake:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {TranslateString(999, 'get')} {symbol}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal, LinkExternal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={TranslateString(1068, 'Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={TranslateString(1070, 'Stake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} fullWidth>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          fullWidth\n          disabled={pendingTx || fullBalance === '0' || val === '0'}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {TranslateString(999, 'Get')} {tokenName}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={TranslateString(1126, 'Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={TranslateString(588, 'Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} fullWidth>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n          fullWidth\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  addLiquidityUrl?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  addLiquidityUrl,\n}) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake LP')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n\n  const rawEarningsBalance = getBalanceNumber(earnings)\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      <Button\n        disabled={rawEarningsBalance === 0 || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          await onReward()\n          setPendingTx(false)\n        }}\n      >\n        {TranslateString(562, 'Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider as ProviderType } from 'web3-core'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBep20Contract } from 'utils/contractHelpers'\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport useWeb3 from 'hooks/useWeb3'\nimport { useApprove } from 'hooks/useApprove'\nimport UnlockButton from 'components/UnlockButton'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  provider?: ProviderType\n  account?: string\n  addLiquidityUrl?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = useFarmFromSymbol(farm.lpSymbol)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = getAddress(lpAddresses)\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const web3 = useWeb3()\n\n  const lpContract = getBep20Contract(lpAddress, web3)\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        pid={pid}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n    ) : (\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(758, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          CAKE\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(1072, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(1074, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\n\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\n  // Everything here is worked out relative to a year, with the asset compounding daily\n  const timesCompounded = 365\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const apyAsDecimal = farmApy / 100\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\n  const principal = 1000 / cakePrice\n\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\n  const interestEarned = finalAmount - principal\n  return roundToTwoDp(interestEarned)\n}\n\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage.toFixed(2)\n}\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  addLiquidityUrl?: string\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  cakePrice,\n  apy,\n  addLiquidityUrl,\n}) => {\n  const TranslateString = useI18n()\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(860, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(858, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(864, 'CAKE per $1000')}\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          866,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={addLiquidityUrl}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apy, addLiquidityUrl }) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal lpLabel={lpLabel} cakePrice={cakePrice} apy={apy} addLiquidityUrl={addLiquidityUrl} />,\n  )\n\n  return (\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\n      <CalculateIcon />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider as ProviderType } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n\t0% {\n\t\tbackground-position: 0% 50%;\n\t}\n\t50% {\n\t\tbackground-position: 100% 50%;\n\t}\n\t100% {\n\t\tbackground-position: 0% 50%;\n\t}\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(\n    45deg,\n    rgba(255, 0, 0, 1) 0%,\n    rgba(255, 154, 0, 1) 10%,\n    rgba(208, 222, 33, 1) 20%,\n    rgba(79, 220, 74, 1) 30%,\n    rgba(63, 218, 216, 1) 40%,\n    rgba(47, 201, 226, 1) 50%,\n    rgba(28, 127, 238, 1) 60%,\n    rgba(95, 21, 242, 1) 70%,\n    rgba(186, 12, 248, 1) 80%,\n    rgba(251, 7, 217, 1) 90%,\n    rgba(255, 0, 0, 1) 100%\n  );\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 32px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  ethPrice?: BigNumber\n  provider?: ProviderType\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethPrice, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.ETH) {\n      return ethPrice.times(farm.lpTotalInQuoteToken)\n    }\n    return farm.lpTotalInQuoteToken\n  }, [bnbPrice, cakePrice, ethPrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const earnLabel = farm.dual ? farm.dual.earnLabel : 'CAKE'\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString('en-US').slice(0, -1)\n\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses } = farm\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return (\n    <FCard>\n      {farm.tokenSymbol === 'CAKE' && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        isCommunityFarm={isCommunityFarm}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n      />\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{TranslateString(736, 'APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apy={farm.apy} />\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          bscScanAddress={`https://bscscan.com/address/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`}\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst FarmTabButtons = ({ stackedOnly, setStackedOnly }) => {\n  const { url, isExact } = useRouteMatch()\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <ToggleWrapper>\n        <Toggle checked={stackedOnly} onChange={() => setStackedOnly(!stackedOnly)} />\n        <Text> {TranslateString(1116, 'Staked only')}</Text>\n      </ToggleWrapper>\n      <ButtonMenu activeIndex={isExact ? 0 : 1} size=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {TranslateString(698, 'Active')}\n        </ButtonMenuItem>\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\n          {TranslateString(700, 'Inactive')}\n        </ButtonMenuItem>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 32px;\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-right: 32px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n","import styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd, usePriceEthBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const { account } = useWeb3React()\n  const ethPriceUsd = usePriceEthBusd()\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stackedOnly, setStackedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X')\n  const stackedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n          return farm\n        }\n        const cakeRewardPerBlock = CAKE_PER_BLOCK.times(farm.poolWeight)\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        // cakePriceInQuote * cakeRewardPerYear / lpTotalInQuoteToken\n        let apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken)\n\n        if (farm.quoteTokenSymbol === QuoteToken.BUSD || farm.quoteTokenSymbol === QuoteToken.UST) {\n          apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken).times(bnbPrice)\n        } else if (farm.quoteTokenSymbol === QuoteToken.ETH) {\n          apy = cakePrice.div(ethPriceUsd).times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken)\n        } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n          apy = cakeRewardPerYear.div(farm.lpTotalInQuoteToken)\n        } else if (farm.dual) {\n          const cakeApy =\n            farm && cakePriceVsBNB.times(cakeRewardPerBlock).times(BLOCKS_PER_YEAR).div(farm.lpTotalInQuoteToken)\n          const dualApy =\n            farm.tokenPriceVsQuote &&\n            new BigNumber(farm.tokenPriceVsQuote)\n              .times(farm.dual.rewardPerBlock)\n              .times(BLOCKS_PER_YEAR)\n              .div(farm.lpTotalInQuoteToken)\n\n          apy = cakeApy && dualApy && cakeApy.plus(dualApy)\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          ethPrice={ethPriceUsd}\n          account={account}\n        />\n      ))\n    },\n    [farmsLP, bnbPrice, ethPriceUsd, cakePrice, account],\n  )\n\n  return (\n    <Page>\n      <Heading as=\"h1\" size=\"lg\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        {TranslateString(696, 'Stake LP tokens to earn CAKE')}\n      </Heading>\n      <FarmTabButtons stackedOnly={stackedOnly} setStackedOnly={setStackedOnly} />\n      <div>\n        <Divider />\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {stackedOnly ? farmsList(stackedOnlyFarms, false) : farmsList(activeFarms, false)}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsList(inactiveFarms, true)}\n          </Route>\n        </FlexLayout>\n      </div>\n      <Image src=\"/images/cakecat.png\" alt=\"Pancake illustration\" width={949} height={384} responsive />\n    </Page>\n  )\n}\n\nexport default Farms\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? 'Hide' : 'Details'}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n"],"sourceRoot":""}